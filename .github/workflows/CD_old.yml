name: CD using Docker Image

on:
    # push:
    #     branches:
    #         - main
    #     paths:
    #         - .github/workflows/CD.yml
    #         - ./**
    #         - "**.py"
    #         - requirements.txt
    workflow_dispatch:

env:
    IMAGE: ${{ vars.NCR_HOST }}/lion-app
    IMAGE_TAG: ${{ vars.NCR_HOST }}/lion-app:latest
    CONTAINER_NAME: lion-app-dc

jobs:
    build-and-push:
        name: build images and push to NCR
        runs-on: ubuntu-latest
        steps:
            - name: checkout repository
              uses: actions/checkout@v3
            - name: Set up Docker buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to NCR
              uses: docker/login-action@v2
              with:
                  registry: ${{ vars.NCR_HOST }}
                  username: ${{ secrets.NCP_ACCESS_KEY_ID }}
                  password: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
            - name: Get current timestamp
              id: image-tag
              run: echo "TIMESTAMP=$(date "+%s")" >> "$GITHUB_OUTPUT"
            - name: Build and Push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  tags: ${{ env.IMAGE_TAG }},${{ env.IMAGE }}:${{ steps.image-tag.outputs.TIMESTAMP }}
                  file: Dockerfile_django
                  push: true

    deploy-staging:
        if: ${{ success() }}
        needs: build-and-push
        name: deploy to staging
        runs-on: ubuntu-latest
        steps:
            - name: checkout repository
              uses: actions/checkout@v3
            - name: pull and run the image
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.NCP_STAGING_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  password: ${{ secrets.SSH_PASSWORD }}
                  script: |
                      docker login \
                      ${{ vars.NCR_HOST }} \
                      -u ${{ secrets.NCP_ACCESS_KEY_ID }} \
                      -p ${{ secrets.NCP_SECRET_ACCESS_KEY }}
                      docker pull ${{ env.IMAGE_TAG }}
                      docker stop ${{ env.CONTAINER_NAME }} && docker rm ${{ env.CONTAINER_NAME }}
                      docker run -d -p 8000:8000 \
                      -v ~/.aws:/root/.aws:ro \
                      --env-file .env \
                      --name ${{ env.CONTAINER_NAME }} \
                      ${{ env.IMAGE_TAG }}
            - name: echo IMAGE_TAG
              run: echo $IMAGE_TAG
